{
	"info": {
		"_postman_id": "fcc5bf7a-51fc-41ff-bc4a-7068ab461158",
		"name": "Catalyst Center API LAB 302 - Template Deployment",
		"description": "This Collection is designed to build a project in the template editor, and upload and commit a template ready for deployment.\n\nChanges made to Deploy Template due to API modifications. New Req'd field of versionedTemplateID. Additionally, issues found with v1 template on 2.3.5.5.\n\nPlease use the csv provided...\n\n[⬇︎Cisco Catalyst Center Design Settings CSV⬇︎](https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/kebaldwi/DNAC-TEMPLATES/tree/master/LABS/LAB-I-Rest-API-Orchestration/csv/DNAC-Design-Settings.csv)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13375428",
		"_collection_link": "https://www.postman.com/dark-capsule-39992/workspace/catalyst-center-use-case-api-collections/collection/13375428-fcc5bf7a-51fc-41ff-bc4a-7068ab461158?action=share&source=collection_link&creator=13375428"
	},
	"item": [
		{
			"name": "CC Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"pm.environment.unset(\"GeneralTestString\");\r",
							"\r",
							"if (jsonData.Token) {\r",
							"    pm.test(\"Token acquired\",() => {pm.expect(pm.response.text()).to.include(\"Token\");});\r",
							"    pm.environment.set(\"TOKEN\", jsonData[\"Token\"]); \r",
							"}\r",
							"else {\r",
							"    pm.test(\"Token not acquired\",() => {pm.expect(pm.response.text()).to.include(\"Token\");});\r",
							"    postman.setNextRequest(\"null\");\r",
							"}\r",
							"\r",
							"pm.environment.set(\"GeneralTestString\", pm.iterationData.get(\"Project\"));\r",
							"var teststring = pm.environment.get(\"GeneralTestString\");\r",
							"if ( teststring != \"\" ) {\r",
							"    postman.setNextRequest(\"Check Project Id\");\r",
							"} else {\r",
							"    postman.setNextRequest(\"null\");\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{CCpwd}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{CCuser}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{CCip}}/dna/system/api/v1/auth/token",
					"protocol": "https",
					"host": [
						"{{CCip}}"
					],
					"path": [
						"dna",
						"system",
						"api",
						"v1",
						"auth",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check Project Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var Name = pm.iterationData.get(\"HierarchyArea\");",
							"var Name = Name.replace(/\\s/g, '');",
							"var ProjectName = \"Project-\" + Name;",
							"var TemplateName = pm.iterationData.get(\"TemplateName\");",
							"var FLAG = 0;",
							"",
							"pm.environment.unset(\"ProjectName\");",
							"pm.environment.unset(\"TemplateName\");",
							"pm.environment.unset(\"ProjectId\");",
							"pm.environment.unset(\"TemplateId\");",
							"",
							"pm.environment.set(\"ProjectName\", ProjectName);",
							"pm.environment.set(\"TemplateName\", TemplateName);",
							"",
							"for (var i = 0;i<jsonData.length;i++) {",
							"    if (jsonData[i][\"name\"] === ProjectName) {",
							"        FLAG = 1;",
							"        pm.test(\"Project acquired\",() => {pm.expect(pm.response.text()).to.include(jsonData[i][\"id\"]);});",
							"        pm.environment.set(\"ProjectId\", jsonData[i][\"id\"]);",
							"        if (jsonData[i][\"templates\"].length != 0){",
							"            for (var t = 0;t<jsonData[i][\"templates\"].length;t++){",
							"                if (jsonData[i][\"templates\"][t][\"name\"] === TemplateName){",
							"                    FLAG = 2;",
							"                    pm.test(\"Template acquired\",() => {pm.expect(pm.response.text()).to.include(jsonData[i][\"templates\"][t][\"name\"]);});",
							"                    pm.environment.set(\"TemplateId\", jsonData[i][\"templates\"][t][\"id\"]);",
							"                    postman.setNextRequest(\"null\");",
							"                    break;",
							"                }",
							"            }",
							"            if (FLAG === 1){",
							"                postman.setNextRequest(\"Create Template\");",
							"                break;",
							"",
							"            }",
							"        }",
							"        else{",
							"            postman.setNextRequest(\"Create Template\");",
							"            break;",
							"        }",
							"    }",
							"}",
							"if (FLAG === 0){",
							"    postman.setNextRequest(\"Create Project\")",
							"}",
							"if (FLAG === 2){",
							"    if (pm.iterationData.get(\"DeployTemplate\") != \"\"){",
							"        postman.setNextRequest(\"Get Device Id\");",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{CCip}}/dna/intent/api/v1/template-programmer/project",
					"protocol": "https",
					"host": [
						"{{CCip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"template-programmer",
						"project"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Project",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"setTimeout(function(){}, [1000]);\r",
							"if (jsonData.response.taskId) {\r",
							"    pm.test(\"Project created\",() => {pm.expect(pm.response.text()).to.include(\"taskId\");});\r",
							"    pm.environment.set(\"ProjectTaskId\", jsonData.response.taskId);\r",
							"    postman.setNextRequest(\"Get Project Task Id\");\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Project not created\",() => {pm.expect(pm.response.text()).to.include(\"taskId\");});\r",
							"    postman.setNextRequest(\"null\");\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var Name = pm.iterationData.get(\"HierarchyArea\");\r",
							"pm.environment.get(\"ProjectName\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"description\": \"This Project was deployed by Rest-API\",\r\n    \"name\": \"{{ProjectName}}\"\r\n}"
				},
				"url": {
					"raw": "https://{{CCip}}/dna/intent/api/v1/template-programmer/project",
					"protocol": "https",
					"host": [
						"{{CCip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"template-programmer",
						"project"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Project Task Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"let ProjectName = pm.environment.get(\"ProjectName\");",
							"let SearchString = \"Successfully created project with name \" + ProjectName ",
							"if (jsonData.response.progress = SearchString) {",
							"    pm.test(\"Project acquired\",() => {pm.expect(pm.response.text()).to.include(\"data\");});",
							"    pm.environment.set(\"ProjectId\", jsonData[\"response\"][\"data\"]); ",
							"}",
							"setTimeout(function(){}, [1000]);",
							"postman.setNextRequest(\"Create Template\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{CCip}}/dna/intent/api/v1/task/{{ProjectTaskId}}",
					"protocol": "https",
					"host": [
						"{{CCip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"task",
						"{{ProjectTaskId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Template",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.get(\"ProjectId\");\r",
							"pm.environment.get(\"ProjectName\");\r",
							"pm.environment.get(\"TemplateName\");\r",
							"pm.environment.get(\"Template\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"if (jsonData.response.taskId) {\r",
							"    pm.test(\"Template created\",() => {pm.expect(pm.response.text()).to.include(\"taskId\");});\r",
							"    pm.environment.set(\"TemplateTaskId\", jsonData.response.taskId);\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Template not created\",() => {pm.expect(pm.response.text()).to.include(\"taskId\");});\r",
							"    postman.setNextRequest(\"null\");\r",
							"}\r",
							"setTimeout(function(){}, [25000]);\r",
							"postman.setNextRequest(\"Get Template Task Id\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{Template}}"
				},
				"url": {
					"raw": "https://{{CCip}}/dna/intent/api/v1/template-programmer/project/{{ProjectId}}/template",
					"protocol": "https",
					"host": [
						"{{CCip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"template-programmer",
						"project",
						"{{ProjectId}}",
						"template"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Template Task Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"let ProjectName = pm.environment.get(\"ProjectName\");",
							"let SearchString = \"Successfully created project with name \" + ProjectName ",
							"if (jsonData.response.progress = SearchString) {",
							"    pm.test(\"Template acquired\",() => {pm.expect(pm.response.text()).to.include(\"data\");});",
							"    pm.environment.set(\"TemplateId\", jsonData[\"response\"][\"data\"]); ",
							"}",
							"setTimeout(function(){}, [5000]);",
							"postman.setNextRequest(\"Commit Template\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{CCip}}/dna/intent/api/v1/task/{{TemplateTaskId}}",
					"protocol": "https",
					"host": [
						"{{CCip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"task",
						"{{TemplateTaskId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Commit Template",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.get(\"TemplateId\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"if (jsonData.response.taskId) {\r",
							"    pm.test(\"Template committed\",() => {pm.expect(pm.response.text()).to.include(\"response\");});\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Template not committed\",() => {pm.expect(pm.response.text()).to.include(\"response\");});\r",
							"    postman.setNextRequest(\"null\");\r",
							"}\r",
							"setTimeout(function(){}, [5000]);\r",
							"pm.environment.set(\"GeneralTestString\", pm.iterationData.get(\"DeployTemplate\"));\r",
							"if (pm.environment.get(\"GeneralTestString\") != \"\"){\r",
							"    postman.setNextRequest(\"Get Device Id\");\r",
							"}\r",
							"else {\r",
							"    postman.setNextRequest(\"null\");\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"comments\": \"Template Initial Version\",\r\n    \"templateId\": \"{{TemplateId}}\"\r\n}"
				},
				"url": {
					"raw": "https://{{CCip}}/dna/intent/api/v1/template-programmer/template/version",
					"protocol": "https",
					"host": [
						"{{CCip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"template-programmer",
						"template",
						"version"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Device Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var DeviceList = pm.iterationData.get(\"DeviceList\");",
							"//console.log(DeviceList)",
							"var DeviceList = DeviceList.split(\",\");",
							"var DeviceId = \"\";",
							"var DeviceIp = \"\";",
							"var FLAG = DeviceList.length;",
							"pm.environment.set(\"FLAG\", FLAG);",
							"for (var dl = 0; dl < DeviceList.length; dl++) {",
							"    for (var i = 0; i < jsonData.response.length; i++) {",
							"        if (DeviceList[dl] === jsonData[\"response\"][i][\"managementIpAddress\"]){",
							"            if (dl === 0){",
							"                DeviceId = jsonData[\"response\"][i][\"id\"];",
							"                DeviceIp = jsonData[\"response\"][i][\"managementIpAddress\"];",
							"            }",
							"            else {",
							"                DeviceId = DeviceId + \",\" + jsonData[\"response\"][i][\"id\"];",
							"                DeviceIp = DeviceIp + \",\" + jsonData[\"response\"][i][\"managementIpAddress\"];",
							"            }",
							"            break;",
							"        }",
							"    }",
							"}",
							"pm.environment.set(\"DeviceId\", DeviceId);",
							"pm.environment.set(\"DeviceIp\", DeviceIp);",
							"pm.test(\"Devices acquired\",() => {pm.expect(pm.response.text()).to.include(\"response\");});",
							"postman.setNextRequest(\"Deploy Template\");",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"FLAG\", 0);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{CCip}}/api/v1/network-device",
					"protocol": "https",
					"host": [
						"{{CCip}}"
					],
					"path": [
						"api",
						"v1",
						"network-device"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Device Id Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var DeviceList = pm.iterationData.get(\"DeviceList\");",
							"var DeviceList = DeviceList.split(\",\");",
							"var DeviceId = \"\";",
							"var DeviceIp = \"\";",
							"var FLAG = DeviceList.length;",
							"pm.environment.set(\"FLAG\", FLAG);",
							"for (var dl = 0; dl < DeviceList.length; dl++) {",
							"    for (var i = 0; i < jsonData.response.length; i++) {",
							"        if (jsonData[\"response\"][i][\"managementIpAddress\"] === DeviceList[dl]){",
							"            if (dl === 0){",
							"                DeviceId = jsonData[\"response\"][i][\"id\"];",
							"                DeviceIp = jsonData[\"response\"][i][\"managementIpAddress\"];",
							"            }",
							"            else {",
							"                DeviceId = DeviceId + \",\" + jsonData[\"response\"][i][\"id\"];",
							"                DeviceIp = DeviceIp + \",\" + jsonData[\"response\"][i][\"managementIpAddress\"];",
							"            }",
							"            break;",
							"        }",
							"    }",
							"}",
							"pm.environment.set(\"DeviceId\", DeviceId);",
							"pm.environment.set(\"DeviceIp\", DeviceIp);",
							"pm.test(\"Devices acquired\",() => {pm.expect(pm.response.text()).to.include(\"response\");});",
							"postman.setNextRequest(\"Deploy Template\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"FLAG\", 0);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{CCip}}/api/v1/network-device",
					"protocol": "https",
					"host": [
						"{{CCip}}"
					],
					"path": [
						"api",
						"v1",
						"network-device"
					]
				}
			},
			"response": []
		},
		{
			"name": "Deploy Template",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.get(\"DeviceIp\");\r",
							"var i = pm.environment.get(\"DeviceIp\");\r",
							"var i = i.split(\",\");\r",
							"var c = i.length;\r",
							"if (c > 1){\r",
							"    var FLAG = pm.environment.get(\"FLAG\");\r",
							"    FLAG = FLAG - 1;\r",
							"    pm.environment.set(\"TargetDeviceId\", i[FLAG]);\r",
							"}\r",
							"else{\r",
							"    pm.environment.set(\"TargetDeviceId\", pm.environment.get(\"DeviceIp\"));\r",
							"}\r",
							"pm.environment.get(\"TargetDeviceId\");\r",
							"pm.environment.get(\"TemplateId\");\r",
							"pm.environment.set(\"FLAG\", FLAG);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"pm.test(\"Template deployed\",() => {pm.expect(pm.response.text()).to.include(\"taskId\");});\r",
							"var FLAG = pm.environment.get(\"FLAG\");\r",
							"if (FLAG > 0){\r",
							"    postman.setNextRequest(\"Deploy Template\");\r",
							"}\r",
							"else{\r",
							"    postman.setNextRequest(\"null\");\r",
							"} \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"forcePushTemplate\": false,\r\n    \"isComposite\": false,\r\n    \"targetInfo\": [\r\n        {\r\n            \"id\": \"{{TargetDeviceId}}\",\r\n            \"type\": \"MANAGED_DEVICE_IP\",\r\n            \"versionedTemplateId\": \"{{TemplateId}}\"            \r\n        }\r\n    ],\r\n    \"templateId\": \"{{TemplateId}}\"\r\n}"
				},
				"url": {
					"raw": "https://{{CCip}}/dna/intent/api/v2/template-programmer/template/deploy",
					"protocol": "https",
					"host": [
						"{{CCip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v2",
						"template-programmer",
						"template",
						"deploy"
					]
				}
			},
			"response": []
		}
	]
}